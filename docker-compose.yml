version: '3.8'

services:
  # Main application
  network-security-app:
    build: .
    container_name: network-security-app
    ports:
      - "8000:8000"  # API
      - "8050:8050"  # Dashboard
      - "9090:9090"  # Metrics
    environment:
      - ENVIRONMENT=production
      - DB_DATABASE_URL=postgresql://network_user:network_pass@postgres:5432/network_security
      - CACHE_REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MONITORING_ENABLE_SENTRY=true
      - MONITORING_SENTRY_DSN=${SENTRY_DSN}
      - SECURITY_SECRET_KEY=${SECRET_KEY}
    depends_on:
      - postgres
      - redis
      - kafka
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - network-security-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: network-security-postgres
    environment:
      - POSTGRES_DB=network_security
      - POSTGRES_USER=network_user
      - POSTGRES_PASSWORD=network_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - network-security-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: network-security-redis
    command: redis-server --appendonly yes --requirepass redis_pass
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - network-security-network

  # Kafka for streaming data
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: network-security-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    networks:
      - network-security-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: network-security-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    restart: unless-stopped
    networks:
      - network-security-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: network-security-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - network-security-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: network-security-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - network-security-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: network-security-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - network-security-app
    restart: unless-stopped
    networks:
      - network-security-network

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: network-security-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - network-security-network

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: network-security-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - network-security-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  network-security-network:
    driver: bridge 